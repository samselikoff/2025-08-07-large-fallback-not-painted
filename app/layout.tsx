import type { Metadata } from 'next';
import './globals.css';
import { Suspense } from 'react';
import Link from 'next/link';

export const metadata: Metadata = {
  title: 'Create Next App',
  description: 'Generated by create next app',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className="flex gap-4 bg-gray-200">
        <div className="max-w-xl p-4">
          <p>
            This demo shows how a Suspense fallback that's too large will de-opt
            an initial render from showing that boundary, and instead show the
            nearest ancestor.
          </p>

          <p className="mt-2">
            To repro, visit "Small skeleton" and reload the page. You'll see
            "All work and no play" (the local page skeleton) while the main
            content loads.
          </p>

          <p className="mt-2">
            Then, visit "Large skeleton" and reload the page. You'll see "Root
            layout fallback" first, then immediatel you'll see "All work and no
            play" (the local page skeleton).
          </p>

          <p className="mt-2">
            If you disable JavaScript, you'll see the two pages have different
            initial paints.
          </p>

          <p className="mt-2">It happens in both dev and prod.</p>
        </div>

        <div className="p-4 bg-white w-full">
          <nav className="mt-4 flex gap-4">
            <Link href="/" className="underline">
              Home
            </Link>
            <Link href="/small-skeleton" className="underline">
              Small skeleton
            </Link>
            <Link href="/large-skeleton" className="underline">
              Large skeleton
            </Link>
          </nav>
          <main className="mt-4">
            <Suspense fallback="Root layout fallback">{children}</Suspense>
          </main>
        </div>
      </body>
    </html>
  );
}
